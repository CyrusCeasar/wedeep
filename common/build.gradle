apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'androidx.navigation.safeargs.kotlin'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    dataBinding {
        enabled = true
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
        defaultConfig{
            javaCompileOptions {
                annotationProcessorOptions {
                    arguments = [AROUTER_MODULE_NAME: project.getName(), AROUTER_GENERATE_DOC: "enable"]
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // work-runtime-ktx 2.1.0 and above now requires Java 8
    kotlinOptions {
        jvmTarget = "1.8"
    }

}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
jacoco {
    toolVersion = "$rootProject.jacocoVersion"
}
dependencies {
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"
    kapt "com.alibaba:arouter-compiler:$rootProject.arouter_compiler_version"
    api "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    api "androidx.core:core-ktx:$rootProject.ktxVersion"
    api "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"
    api "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"

    api "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    api "androidx.room:room-runtime:$rootProject.roomVersion"
    api "androidx.paging:paging-runtime:$rootProject.pagingVersion"
    api "androidx.room:room-ktx:$rootProject.roomVersion"
    api "androidx.work:work-runtime-ktx:$rootProject.workVersion"
    api "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    api "androidx.appcompat:appcompat:$rootProject.appCompatVersion"

    api "androidx.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    api "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    api "com.google.android.material:material:$rootProject.materialVersion"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlinVersion"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutinesVersion"


    api "com.alibaba:arouter-api:$rootProject.arouter_api_version"


    // Tools
    api "com.jakewharton.timber:timber:$rootProject.timberVersion"
    api "com.facebook.stetho:stetho:$rootProject.stetho"
    api "com.facebook.stetho:stetho-okhttp3:$rootProject.stetho"

    // Dagger
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"
    api "com.google.dagger:dagger:$rootProject.daggerVersion"
    api "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    api "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"

    // Networking
    api "com.google.code.gson:gson:$rootProject.gsonVersion"
    api "com.squareup.retrofit2:retrofit:$rootProject.retrofit"
    api "com.squareup.retrofit2:converter-gson:$rootProject.retrofit"
    api "com.squareup.okhttp3:okhttp:$rootProject.okhttp"
    api "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttp"

    // Testing dependencies
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.mockwebserverVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"

    androidTestImplementation "androidx.test:core:$rootProject.testCoreVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.testRulesVersion"

    androidTestImplementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    androidTestImplementation "androidx.recyclerview:recyclerview:$rootProject.recyclerViewVersion"
    androidTestImplementation "com.google.android.material:material:$rootProject.materialVersion"

    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.testExtJunit"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:$rootProject.uiAutomatorVersion"
    androidTestImplementation "androidx.work:work-testing:$rootProject.workVersion"

    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.mockitoAndroidVersion"
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}
